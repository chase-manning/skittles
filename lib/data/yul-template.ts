const yulTemplate: string[] = [
  `    code {`,
  `        // Deploy the contract`,
  `        datacopy(0, dataoffset("runtime"), datasize("runtime"))`,
  `        return(0, datasize("runtime"))`,
  `    }`,
  `    object "runtime" {`,
  `        code {`,
  `            /* ---------- dispatchers start ----------- */`,
  `            switch selector()`,
  `            case 0xb69ef8a8 /* "balance()" */ {`,
  `                returnUint(balanceStorage())`,
  `            }`,
  `            case 0xd91921ed /* "addBalance(uint256)" */ {`,
  `                addBalance(decodeAsUint(0))`,
  `            }`,
  `            default {`,
  `                revert(0, 0)`,
  `            }`,
  `            /* ---------- dispatchers end ----------- */`,
  ``,
  ``,
  `            /* ---------- calldata decoding functions start ----------- */`,
  `            function selector() -> s {`,
  `                s := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000)`,
  `            }`,
  `            function decodeAsUint(offset) -> v {`,
  `                let pos := add(4, mul(offset, 0x20))`,
  `                if lt(calldatasize(), add(pos, 0x20)) {`,
  `                    revert(0, 0)`,
  `                }`,
  `                v := calldataload(pos)`,
  `            }`,
  `            /* ---------- calldata decoding functions end ----------- */`,
  ``,
  ``,
  `            /* ---------- calldata encoding functions start ---------- */`,
  `            function returnUint(v) {`,
  `                mstore(0, v)`,
  `                return(0, 0x20)`,
  `            }`,
  `            /* ---------- calldata encoding functions end ---------- */`,
  ``,
  ``,
  `            /* -------- storage layout start ---------- */`,
  `            function balancePos() -> p { p := 0 }`,
  `            /* -------- storage layout end ---------- */`,
  ``,
  ``,
  `            /* -------- storage access start ---------- */`,
  `            function balanceStorage() -> b {`,
  `                b := sload(balancePos())`,
  `            }`,
  `            function addBalance(value) {`,
  `                sstore(balancePos(), safeAdd(balanceStorage(), value))`,
  `            }`,
  `            /* -------- storage access end ---------- */`,
  ``,
  ``,
  `            /* ---------- utility functions start ---------- */`,
  `            function safeAdd(a, b) -> r {`,
  `                r := add(a, b)`,
  `                if or(lt(r, a), lt(r, b)) { revert(0, 0) }`,
  `            }`,
  `            /* ---------- utility functions end ---------- */`,
  `        }`,
  `    }`,
  `}`,
];

export default yulTemplate;
