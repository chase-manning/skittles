export enum YulSection {
  Constructor = "constructor",
  Dispatchers = "dispatchers",
  Functions = "functions",
  StorageLayout = "storage layout",
  ConstructorStorageLayout = "constructor storage layout",
  StorageAccess = "storage access",
  ConstructorStorageAccess = "constructor storage access",
}

const yulTemplate: string[] = [
  `    code {`,
  `        /* ---------- constructor ----------- */`,
  ``,
  ``,
  `        /* -------- constructor storage layout ---------- */`,
  ``,
  ``,
  `        /* -------- constructor storage access ---------- */`,
  ``,
  ``,
  `        datacopy(0, dataoffset("runtime"), datasize("runtime"))`,
  `        return(0, datasize("runtime"))`,
  `    }`,
  ``,
  `    object "runtime" {`,
  `        code {`,
  `            switch selector()`,
  `            /* ---------- dispatchers ----------- */`,
  `            default {`,
  `                revert(0, 0)`,
  `            }`,
  ``,
  ``,
  `            /* ---------- functions ----------- */`,
  ``,
  ``,
  `            /* ---------- calldata decoding functions ----------- */`,
  `            function selector() -> s {`,
  `                s := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000)`,
  `            }`,
  `            function decodeAsAddress(offset) -> v {`,
  `                v := decodeAsUint(offset)`,
  `                if iszero(iszero(and(v, not(0xffffffffffffffffffffffffffffffffffffffff)))) {`,
  `                    revert(0, 0)`,
  `                }`,
  `            }`,
  `            function decodeAsUint(offset) -> v {`,
  `                let pos := add(4, mul(offset, 0x20))`,
  `                if lt(calldatasize(), add(pos, 0x20)) {`,
  `                    revert(0, 0)`,
  `                }`,
  `                v := calldataload(pos)`,
  `            }`,
  ``,
  ``,
  `            /* ---------- calldata encoding functions ---------- */`,
  `            function returnUint(v) {`,
  `                mstore(0, v)`,
  `                return(0, 0x20)`,
  `            }`,
  `            function returnTrue() {`,
  `                returnUint(1)`,
  `            }`,
  ``,
  ``,
  `            /* -------- storage layout ---------- */`,
  ``,
  ``,
  `            /* -------- storage access ---------- */`,
  ``,
  ``,
  `            /* ---------- utility functions start ---------- */`,
  `            function lte(a, b) -> r {`,
  `                r := iszero(gt(a, b))`,
  `            }`,
  `            function gte(a, b) -> r {`,
  `                r := iszero(lt(a, b))`,
  `            }`,
  `            function safeAdd(a, b) -> r {`,
  `                r := add(a, b)`,
  `                if or(lt(r, a), lt(r, b)) { revert(0, 0) }`,
  `            }`,
  `            function revertIfZeroAddress(addr) {`,
  `                require(addr)`,
  `            }`,
  `            function require(condition) {`,
  `                if iszero(condition) { revert(0, 0) }`,
  `            }`,
  `        }`,
  `    }`,
  `}`,
];

export default yulTemplate;
